plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'jacoco'
    id 'org.sonarqube' version '4.0.0.2929'
}

group = 'study'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    runtimeOnly 'com.mysql:mysql-connector-j'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // mockito
    testImplementation "org.mockito:mockito-core:3.+"

    // testcontainers
    testImplementation 'org.testcontainers:testcontainers:1.20.1'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    testImplementation "com.redis.testcontainers:testcontainers-redis-junit:1.6.4"

    // aws, localstack
    implementation(platform("software.amazon.awssdk:bom:2.20.136"))
    implementation("commons-io:commons-io:2.13.0")
    implementation("software.amazon.awssdk:aws-core")
    implementation("software.amazon.awssdk:sdk-core")
    implementation("software.amazon.awssdk:sts")
    implementation("software.amazon.awssdk:s3")
    testImplementation("org.testcontainers:localstack:1.20.0")

    // kafka
    implementation("org.springframework.kafka:spring-kafka")
    testImplementation("org.testcontainers:kafka")

    // archunit
    testImplementation 'com.tngtech.archunit:archunit:1.1.0'

}

jacoco {
    toolVersion = "0.8.8"
}

// test task 실행 마지막을 jacocoTestReport task로 장식한다.
tasks.named('test') {
    useJUnitPlatform()

    jacoco {}
    finalizedBy(tasks.jacocoTestReport)
}

tasks.jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
        csv.required = false

        xml.destination(file("build/jacoco/jacoco.xml"))
        html.destination(file("build/jacoco/jacoco.html"))
    }

    finalizedBy(tasks.jacocoTestCoverageVerification)
}

// 커버리지가 특정 값 이하면 테스트 실패
tasks.jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = "CLASS"

            // 각 클래스의 테스트로 다뤄지는 라인이 해당 클래스 전체 라인의 반을 넘어야 한다.
            limit {
                counter = "LINE"
                value = "COVEREDRATIO"
                minimum = BigDecimal.valueOf(0.5)
            }

            // 각 클래스는 100 줄을 초과하면 안된다.
            limit {
                counter = "LINE"
                value = "TOTALCOUNT"
                maximum = BigDecimal.valueOf(100)
            }

            excludes = List.of(
                    "*.controller.*",
                    "study.DayonetestApplication",
                    "study.MyCalculatorApplication",
                    "study.service.KafkaConsumerService"
            )
        }
    }
}

sonar {
    properties {
        property("sonar.host.url", "http://localhost:9000")
        property("sonar.login", "sqp_e39c5268310e76ab6c07ab16a1018551022ef17a")
        property("sonar.sources", "src/main/java")
        property("sonar.tests", "src/test/java")
        property("sonar.sourceEncoding", "UTF-8")
        property("sonar.projectKey", "dayonetest")
        property("sonar.projectName", "dayonetest")
        property("sonar.coverage.jacoco.xmlReportPaths", "build/jacoco/jacoco.xml")
    }
}
